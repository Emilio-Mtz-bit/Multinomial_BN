---
title: "dataset_personas"
author: "Diego Aréchiga"
format: html
editor: visual
---

## dataset_personas

```{python}
import pandas as pd
import numpy as np
```

```{python}
data2 = pd.read_csv("./eod_2017_csv/tviaje_eod2017/conjunto_de_datos/tviaje.csv")
```

```{python}
data2 = data2.drop(columns = ["p5_11a","p5_12_6","p5_12_7","p5_13", "p5_15_14", "p5_15_04", "p5_15_05", "p5_15_09", "p5_15_17", "p5_15_02", "p5_15_03", "p5_15_06", "p5_15_07", "p5_15_08", "p5_15_10", "p5_15_11", "p5_15_12" , "p5_15_13", "p5_15_14", "p5_15_15", "p5_15_16", "p5_15_17", "p5_15_18", "p5_15_19", "p5_15_20", "p5_18", "p5_19", "p5_20", "p5_21_1", "p5_21_2", "p5_22", "p5_23", "p5_24", "p5_25", "p5_26", "p5_27_1", "p5_27_2", "p5_27_3", "p5_27_4", "p5_27_5", "p5_27_6", "p5_27_7", "p5_27_8", "p5_3", "p5_6", "p5_7_6", "dto_origen", "dto_dest", "p5_14_20", "factor", "upm_dis", "est_dis"])
```

```{python}
data2.columns
```

```{python}
data2.columns = ["id_via", "id_soc","n_via", "entidad", "hora_ini", "min_ini", "hora_fin", "min_fin", "used_auto", "veces_auto", "used_colectivo", "used_uber", "used_taxi", "used_metro", "used_autobusM1", "used_bicicleta", "used_autobus", "used_moto", "used_trolibus", "used_metrobus", "used_tren_ligero", "used_tren_suburbano", "used_caminar", "used_mixcable", "used_bicitaxi", "used_mototaxi", "used_transporte_escolar", "used_transporte_personal", "estrato", "tam_localidad", "sexo", "edad"]
```

```{python}
data2 = data2.drop(columns = ["used_colectivo", "used_uber", "used_taxi", "used_metro", "used_moto", "used_trolibus", "used_metrobus", "used_tren_ligero", "used_tren_suburbano", "used_mixcable", "used_bicitaxi", "used_mototaxi","used_transporte_escolar", "used_transporte_personal"])
```

```{python}
data2.columns
```

```{python}
data2.head(20)
```

```{python}
data2.columns = data2.columns.str.strip()

ID, NVIA = "id_soc", "n_via"
used_cols = ["used_auto", "used_autobusM1", "used_bicicleta", "used_autobus", "used_caminar"]

extra_cols = ["sexo", "edad", "estrato", "entidad"]

def to01(val):
    try:
        return 1 if int(float(val)) == 1 else 0
    except Exception:
        return 0

results = {}          
dias_por_id = {}      
extras_by_id = {}   
id_order = []         

for j in range(data2.shape[0]):
    idv = data2.loc[j, ID]

    if idv not in results:
        id_order.append(idv)
        results[idv] = {c: 0 for c in used_cols}
        dias_por_id[idv] = 0
        extras_by_id[idv] = {c: None for c in extra_cols}

    # contar días
    nvia_val = data2.loc[j, NVIA]
    try:
        if int(float(nvia_val)) == 1:
            dias_por_id[idv] = dias_por_id[idv] + 1
    except Exception:
        pass

    # marcar usos binarios (alguna vez)
    for c in used_cols:
        if to01(data2.loc[j, c]) == 1:
            results[idv][c] = 1

    # capturar el primer valor no nulo de extras
    for c in extra_cols:
        if extras_by_id[idv][c] is None:
            val = data2.loc[j, c]
            if pd.notna(val):
                extras_by_id[idv][c] = val

# Construir el DataFrame final en el mismo orden de aparición
out_rows = []
for idv in id_order:
    row = {"id_soc": idv, "dias": dias_por_id[idv]}
    for c in extra_cols:
        row[c] = extras_by_id[idv][c]
    for c in used_cols:
        row[c] = results[idv][c]
    out_rows.append(row)

resultado = pd.DataFrame(out_rows, columns=["id_soc", "dias"] + extra_cols + used_cols)
```

```{python}
print(resultado.head())
```

```{python}
resultado.to_csv("data_persona.csv", index=False, encoding="utf-8")
```

